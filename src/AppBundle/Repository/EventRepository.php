<?php

namespace AppBundle\Repository;

use Symfony\Component\HttpKernel\Exception\NotFoundHttpException;

/**
 * EventRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class EventRepository extends \Doctrine\ORM\EntityRepository
{
    public function findUserEvent(string $id, int $userId)
    {
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
          'SELECT e.title, e.start, e.end
          FROM AppBundle\Entity\Event e
          WHERE e.id = :id
          AND e.user = :userId'
        )->setParameter('id', $id)
        ->setParameter('userId', $userId);

        $event = $query->getOneOrNullResult();

        if (null === $event) {
            throw new NotFoundHttpException(
            'No event found for id '.$id
            );
        }

        return $event;
    }

    public function getUserEvent(string $id, int $userId)
    {
        $event = $this->findOneBy([
           'id' => $id,
           'user' => $userId
         ]);

        if (null === $event) {
            throw new NotFoundHttpException(
            'No event found for id '.$id
            );
        }

        return $event;
    }

    public function findUserEvents(int $userId)
    {
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
          'SELECT e.id, e.title, e.start, e.end
          FROM AppBundle\Entity\Event e
          WHERE e.user = :userId'
      )->setParameter('userId', $userId);

        return $query->execute();
    }

    public function findAllByUser(int $userId)
    {
        $entityManager = $this->getEntityManager();

        $query = $entityManager->createQuery(
          'SELECT e.title, e.start, e.end
          FROM AppBundle\Entity\Event e
          WHERE e.user = :userId'
      )->setParameter('userId', $userId);

        return $query->execute();
    }
}
